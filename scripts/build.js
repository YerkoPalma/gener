#!/usr/bin/env node
'use strict'

var fs = require('fs')
var path = require('path')
const posts = require('../views/data.js')
// const Handlebars = require('handlebars')
const layout = require('../config.json').layout
var minify = require('html-minifier').minify

var postsClone = posts
var postArray = []
for (var prop in postsClone) {
  if (prop.charAt(0) === '/' || path.extname(prop) === '.md') {
    delete postsClone[prop]
  } else {
    var defaults = {
      slug: '/' + prop.split('.')[0],
      featuredImage: 'http://placehold.it/550x150',
      featuredImageDescription: ''
    }
    postArray.push(Object.assign(defaults, JSON.parse(postsClone[prop])))
  }
}

var postsLayout = fs.readFileSync(path.resolve(__dirname, '../layouts', layout + '.hbs'), 'utf8')
var from = postsLayout.indexOf('{{#each posts}}') + 15
var to = postsLayout.indexOf('{{/each}}')
var postLayout = postsLayout.substring(from, to).replace(/{{/g, '{').replace(/}}/g, '}')

var start = minify(postsLayout.substring(0, from - 15), { collapseWhitespace: true, includeAutoGeneratedTags: false })
var end = postsLayout.substring(to + 9).trim().replace(/\n/g, '')

var fn = 'const pupa = require(\'pupa\')\n'
fn += 'function compile (acc, post) {\n'
fn += '\treturn acc + pupa(\'' + minify(postLayout, { collapseWhitespace: true }) + '\', post)\n'
fn += '}\n'
fn += 'module.exports = function (posts) {\n'
fn += '\treturn \'' + start + '\' + posts.reduce(compile, \'\') + \'' + end + ' \'\n}\n'
var metaPosts = 'module.exports = ' + JSON.stringify(postArray)

// var template = Handlebars.compile(postsLayout)

fs.writeFile(path.resolve(__dirname, '../views/meta.js'), metaPosts)
fs.writeFile(path.resolve(__dirname, '../views/data-posts.js'), fn)
